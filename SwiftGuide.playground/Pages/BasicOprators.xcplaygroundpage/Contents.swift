//: # 基本运算符
/*:
 一个运算符是一个特殊的符号，或者你使用来检查，更改或合并值的短语。例如，加法运算符（+）对两个数字相加，如：let i = 1 + 2，和AND逻辑运算符（&&）组合两个布尔值，如：&if enteredDoorCode && passedRetinaScan
 
 Swift支持大多数标准C运算符，并改进了几种消除常见编码错误的功能。赋值运算符（=）不返回值，以防止在相等运算（==）意图时错误地使用它。算术运算符（+，-，*，/，%等等）检测和禁止值溢出，来避当工作时数据比存储它们的类型所允许范围更大或更小而发生免意外的结果。在面对数值溢出行为可以选择使用溢出运算符，在溢出运算符中描述。
 
 Swift还提供了在C中不存在的范围运算符，例如a..<b和a...b表示一系列值范围的快捷方式。
 
 本章介绍Swift中的常用运算符。高级运算符涵盖了Swift的高级运算符，并描述了如何定义自定义运算符并为自定义类型实现标准运算符。
 */



//: ## 术语
/*:
 运算符是一元的，二元的或三元的：
 - 一元运算符作用于单个目标上（例如-a）。一元前缀运算符出现在它们的目标之前（例如!b），而一元后缀运算符紧跟在它们的目标之后（例如c!）。
 - 二元运算符作用于两个目标（例如2 + 3），并且是中缀，因为它们出现在两个目标之间。
 - 三元运算符在三个目标上操作。与C一样，Swift只有一个三元运算符，即三元条件运算符（a ? b : c）。
 
 运算符影响的值是操作数。在表达式1 + 2中，符号+是二元运算符，它的两个操作数是值1和2。
 */


//: ## 赋值运算符
/*:
 该赋值运算符（a = b）用b的值初始化或更新a的值
 */
let b = 10
var a = 5
a = b//a的值为10

//: 如果赋值的右侧是具有多个值的元组，则其元素可以一次分解为多个常量或变量：
let (x, y) = (1, 2)

//if let x = y {
//    //这是无效的，因为x = y不返回值
//}

1 + 2
5 - 3
2*3
10.0/2.5

"hello, " + "world"//等于"hello, world"

9%4//等于1

-9%4//等于-1
7%(-3)//等于1
7%3//等于1

let three = 3
let minusThree = -three//-3
let plusThree = -minusThree//3

let minusSix = -6
let alsoMinusSix = +minusSix//6

a = 1
a += 2//3


//: [上一章](@previous)   [下一章](@next)
